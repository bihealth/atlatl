import os.path
import pathlib

workdir: config["workdir"]

# =============================================================================
#  INPUT FILES

in_reads    = config["in_reads"] # map to ref + ava expansion mapping
#in_repeats  = config["in_repeats"] # intersect with reference (.bed file)

# -----------------------------------------------------------------------------
#  paths from prep
reference   = config["reference"]   if config["reference"]   else "PREP/ref_aug.fasta"
annotations = config["annotations"] if config["annotations"] else "PREP/annotations.bed"
constructs  = config["constructs"]  if config["constructs"]  else "PREP/constructs.fasta"   # used in ava expansion mapping

# -----------------------------------------------------------------------------
# intermediary paths
annotations_paf = "FEATURECOUNTS/features/annotations.paf"
#repeats_paf     = "FEATURECOUNTS/repeats/repeats.paf"

# -----------------------------------------------------------------------------
#  output paths

#rcounts = "FEATURECOUNTS/repeats/rcounts.saf"
fcounts = "FEATURECOUNTS/features/fcounts.saf"

ref_align = "ALIGN/alignment.bam"
salign = "ALIGN/salign.bam"
sreads = "FASTQ/sreads.fastq"

# =============================================================================
#  UTIL

depth = config["depth"]
minimap_r = config["minimap_r"], config["minimap_r"]
minimap_z = config["minimap_z"], config["minimap_z"]

# ======in_reads=======================================================================
# RULES

rule all:
    input:
        ref_align,
        fcounts,
        sreads,
        salign

# -----------------------------------------------------------------------------
#  ALIGNMENT
# -----------------------------------------------------------------------------

rule align:
    input:
        reference,
        in_reads,
    params:
        "-x map-ont -a -r " + ','.join(map(str,minimap_r)) + " -z " + ','.join(map(str,minimap_z))
    output:
        ref_align
    threads:
        int(max(0,int(workflow.cores) -1))
    shell:
        "minimap2 -t {threads} {params} {input} | samtools view -b | samtools sort > {output}; samtools index {output}"

# -----------------------------------------------------------------------------
#  FEATURE COUNTS
# -----------------------------------------------------------------------------

rule annotations_bed_to_paf:
    input:
        annotations
    output:
        annotations_paf
    shell:
        """awk 'OFS="\\t" {{print $1"."$2"."$3, $1, $2, $3, "."}}' {input} > {output}"""

#rule repeats_bed_to_paf:
#    input:
#        in_repeats
#    output:
#        repeats_paf
#    shell:
#        """awk 'OFS="\\t" {{print $1"."$2"."$3, $1, $2, $3, "."}}' {input} > {output}"""

rule featurecount:
    input:
        bam=ref_align,
        feat=annotations_paf
    output:
        fcounts
    shell:
        "featureCounts \
        -F SAF -M --fraction -L -R CORE \
        -a {input.feat} \
        -o {output} \
        {input.bam};"

#rule repeatcount:
#    input:
#        bam=ref_align,
#        rep=repeats_paf
#    output:
#        rcounts
#    shell:
#        "featureCounts \
#        -F SAF -M --fraction -L -R CORE \
#        -a {input.rep} \
#        -o {output} \
#        {input.bam}; \
#        sed -i '/0$/d' {output};"

# -----------------------------------------------------------------------------
#  SELECT READS
# -----------------------------------------------------------------------------
rule select_reads:
    input:
        constructs=constructs,
        reads=in_reads
    output:
        sreads
    params:
        depth
    threads:
        int(max(0,int(workflow.cores) -1))
    shell:
        "atlatl write_fastq_of_transitive_reads \
        -a {input.constructs} \
        -r {input.reads} \
        -o {output} \
        -c {threads} \
        -d {params}"

# -----------------------------------------------------------------------------
#  ALIGN SELECTED READS
# -----------------------------------------------------------------------------

rule align_s:
    input:
        reference,
        sreads
    params:
        "-x map-ont -a -r " + ','.join(map(str,minimap_r)) + " -z " + ','.join(map(str,minimap_z))
    output:
        salign
    threads:
        int(max(0,int(workflow.cores) -1))
    shell:
        "minimap2 -t {threads} {params} {input} | samtools view -b | samtools sort > {output}; samtools index {output}"
